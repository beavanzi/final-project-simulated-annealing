# -*- coding: utf-8 -*-
"""portifoliowagner.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14p-xtmQs41tGlRqRvCQ-ITZ5Cd4UHWJD
"""

# Importa as bibliotecas
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas_datareader.data as web
import seaborn as sns
import yfinance as yf
yf.pdr_override()

# # Importa os preços de fechamento
# prices = web.get_data_yahoo(['ITUB4.SA', 'B3SA3.SA', 'VALE3.SA'],
#                                 start = '2024-01-01', end = '2024-01-06')['Close']
# # Retira dados faltantes
# prices = prices.dropna()

# # Plota os preços de fechamento
# sns.set()
# #prices.plot(subplots = True, figsize = (22, 8))
# prices.head()

# teste manual
arrayPrices = np.array([[100.0, 200.0, 300.0],
                        [10.0, 210.0, 305.0],
                        [50.0, 205.0, 310.0],
                        [55.0, 208.0, 315.0]])

prices = pd.DataFrame(arrayPrices, columns=['Column_A', 'Column_B', 'Column_C'])

# Tamanho das colunas (número de ativos)
n = len(prices.columns)



# calcula retorno do período
returnsPeriodo = prices.iloc[[len(prices)-1]].reset_index(drop=True).subtract(prices.iloc[[0]]) /prices.iloc[[0]]

# ativo livre de risco (selic para 3 meses) precisa ser o mesmo período de dados
returnAtivoLivreRisco = 0.028364


# Calcula os retornos
returns = prices/prices.shift(1)-1
# Retira os dados faltantes
returns = returns.dropna()

# calcula o desvio padrão (risco mensal)
riscoMensal = returns.std()

# calcula o risco do período
riscoPeriodo = riscoMensal* np.sqrt(3)

# sharpe = (retorno - retornoAtivoLivreRisco)/risco do período
sharpe = (returnsPeriodo- returnAtivoLivreRisco)/riscoPeriodo
print("O sharpe é: ")
print(sharpe)


# (retorno esperado) # acho que é errado calcular a média dos retornos
mi = returns.mean()

# Calcula a covariância
covariancia = returns.cov()
print("A covariância dos percentuais de retono é:")
print(covariancia)
print("")

#print("retornos "+ str(returns))
#print(returns)
#print(sigma)
print("Retorno do período para cada ativo: ")
print(returnsPeriodo)
print("   ")
print("Índice de sharpe:")
print(sharpe)
print("   ")
print(" Risco do período: ")
print(riscoPeriodo)
#print(mi)

## Define os pesos aleatórios para os ativos
w = np.array([0.01, 0.70, 0.29])
print("Pesos da carteira: ")
print(w)
print("")

wDf = pd.DataFrame(w)
t = returns * w
print("Adição da coluna retorno da carteira a cada período: ")
t["retorno_carteira"] = t.sum(axis=1)
print(t)
print("")

# Calcula o retorno médio da carteira
print("Retorno médio da carteira: ")
print(t["retorno_carteira"].mean())
print("")

# Calcula o risco da carteira por dia
riscoPorDia = t["retorno_carteira"].std()
print("Risco da carteira por dia: " + str(riscoPorDia))
print("")


# Calcula o risco da carteira por período
riscoPeriodo = riscoPorDia*np.sqrt(len(t["retorno_carteira"]))# pelo total de dias
print("Risco da carteira do período de ("+str(len(t["retorno_carteira"])) +" dias): " + str(riscoPeriodo)+". normalmente anualizado em torno de 252 dias de pregão")
print("Risco anualizado = std (ou risco) * raiz(n) onde n é dias ou meses")
print("veja em: https://analisemacro.com.br/mercado-financeiro/medidas-de-retorno-e-risco-de-ativos-individuais/")
print("")


# Calcula o retorno de cada um dos ativos do portifolio
retornoAtivos = w*returnsPeriodo
print("Retorno de cada um dos ativos do portifolio: ")
print(retornoAtivos)
print("")

# Calcula o retono esperado da carteira
retorno = np.sum(retornoAtivos.to_numpy())
print("Retorno da carteira: "+ str(retorno))
print("")


# Calcula os desvio padrão (risco) da carteira # não utilize esta parte
print("A covariância é:")
print(covariancia)
print("o produto da covariancia vezes os pesos é:")
print(np.dot(w,covariancia))
risco = np.sqrt(np.dot(w.T, np.dot(w,covariancia)))
print("o produto da transposta dos pesos vezes a covariancia * w:")
print(np.dot(w.T, np.dot(covariancia, w)))
print("O risco da carteira usando covariancia é: "+ str(risco))
print("")

sharpe = (retorno-returnAtivoLivreRisco)/riscoPeriodo
returnTotPeriodo = (returnsPeriodo * w).sum(axis=1)
print("A taxa periodizada de cresdimento composta: "+str(returnTotPeriodo))
print("O retorno da carteira é (termos de taxa de crescimento composta - (valorfinal-valorinicial)/valorinicial): "+str(returnTotPeriodo))
print("O retorno livre de risco da taxa SELIC é: "+str(returnAtivoLivreRisco))
print("O risco do período é: "+str(riscoPeriodo))
print("O ìndice Sharpe é de: "+str(sharpe))

print("Obs.:")
print("Índice de Sharpe 1: ótimo investimento")
print("Índice de Sharpe = 0.5: bom investimento")
print("Índice de Sharpe = 0: investimento ruim ")
print("Índice de Sharpe < 0: investimento péssimo")

